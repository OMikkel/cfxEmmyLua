// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: lua.flex

package com.korioz.intellij.lua.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.korioz.intellij.lua.lang.LuaLanguageLevel;

import java.io.Reader;

import static com.korioz.intellij.lua.psi.LuaTypes.*;


public class _LuaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xSHEBANG = 2;
  public static final int xDOUBLE_QUOTED_STRING = 4;
  public static final int xSINGLE_QUOTED_STRING = 6;
  public static final int xBACKTICK_STRING = 8;
  public static final int xBLOCK_STRING = 10;
  public static final int xCOMMENT = 12;
  public static final int xBLOCK_COMMENT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\317\u0100"+
    "\u1000\u0500";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\4\33\1\34\1\33\5\35\1\36\3\35\1\37\4\35"+
    "\1\40\2\35\1\41\2\35\1\42\1\43\1\44\1\45"+
    "\1\35\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\35\1\60\1\61\1\35\1\62"+
    "\1\63\1\64\1\35\1\65\1\66\1\67\1\70\1\35"+
    "\1\71\1\41\2\35\1\72\1\73\1\74\1\75\6\0"+
    "\1\3\32\0\1\3\136\0\u0181\76\1\77\177\76\13\77"+
    "\35\76\2\77\5\76\1\77\57\76\1\77\240\76\1\77"+
    "\377\76\u0100\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\2\1\27\1\30\1\31\1\32\1\33\16\27\1\34"+
    "\1\35\1\36\1\37\3\40\1\0\1\41\1\42\1\43"+
    "\1\44\1\45\1\21\1\46\2\21\3\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\2\27\1\56\6\27"+
    "\1\57\1\60\3\27\1\61\5\27\1\62\1\40\2\0"+
    "\1\63\4\0\1\64\1\21\1\0\2\21\1\65\2\27"+
    "\1\66\1\27\1\67\3\27\1\70\1\71\6\27\1\63"+
    "\1\72\5\0\1\21\1\0\1\27\1\73\2\27\1\74"+
    "\3\27\1\75\1\76\2\27\4\0\1\77\1\100\1\21"+
    "\1\101\1\27\1\102\1\27\1\103\2\27\1\104\1\105"+
    "\3\0\1\21\1\106\1\27\1\107\1\110\3\0\1\27"+
    "\1\0\1\111\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u0140"+
    "\0\u01c0\0\u0140\0\u0200\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140"+
    "\0\u0140\0\u0240\0\u0140\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0140\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0140"+
    "\0\u0140\0\u0140\0\u0140\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640"+
    "\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\u0140\0\u0140\0\u0140\0\u08c0\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0140\0\u0140\0\u0a00\0\u0140\0\u0a40\0\u0a80\0\u0140"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0140\0\u0140\0\u0140"+
    "\0\u0140\0\u0140\0\u0140\0\u0140\0\u0c00\0\u0c40\0\u0500\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0500\0\u0500\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0500\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u0140\0\u0140\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u0140\0\u11c0\0\u0a80\0\u0140\0\u1200\0\u0500\0\u1240"+
    "\0\u1280\0\u0500\0\u12c0\0\u0500\0\u1300\0\u1340\0\u1380\0\u0500"+
    "\0\u0500\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u0500\0\u1880\0\u18c0\0\u1900"+
    "\0\u0500\0\u0500\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u0500\0\u1b80\0\u0500\0\u1bc0\0\u0500"+
    "\0\u1c00\0\u1c40\0\u0500\0\u0500\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u0500\0\u1d80\0\u0500\0\u0500\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u0500\0\u1f00\0\u1f40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\10\1\11\1\10\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\7\37\1\40\1\10\1\41\1\42\1\43"+
    "\1\44\1\45\1\37\1\46\1\47\1\50\1\51\1\37"+
    "\1\52\1\37\1\53\1\54\1\55\1\37\1\56\1\37"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\2\37"+
    "\2\2\1\0\1\2\1\0\73\2\6\0\1\66\103\0"+
    "\1\67\133\0\1\70\151\0\1\71\60\0\2\11\1\0"+
    "\1\11\100\0\1\72\122\0\1\73\67\0\1\74\7\0"+
    "\1\75\70\0\1\76\1\0\2\77\75\0\1\100\76\0"+
    "\1\101\1\0\2\30\7\0\1\102\1\0\1\103\1\0"+
    "\1\104\1\105\11\0\1\102\45\0\1\101\1\0\2\30"+
    "\7\0\1\102\1\0\1\103\1\0\1\104\12\0\1\102"+
    "\51\0\1\106\101\0\1\107\1\110\77\0\1\111\77\0"+
    "\1\112\1\113\67\0\1\114\101\0\2\37\6\0\7\37"+
    "\5\0\23\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\13\37\1\115\7\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\16\37\1\116\4\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\14\37\1\117\6\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\12\37"+
    "\1\120\1\121\7\37\4\0\2\37\23\0\2\37\6\0"+
    "\7\37\5\0\1\122\13\37\1\123\4\37\1\124\1\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\14\37"+
    "\1\125\6\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\5\37\1\126\5\37\1\127\7\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\14\37\1\130\6\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\10\37"+
    "\1\131\3\37\1\132\6\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\16\37\1\133\4\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\4\37\1\134\16\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\7\37"+
    "\1\135\6\37\1\136\4\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\13\37\1\137\7\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\7\37\1\140\13\37"+
    "\4\0\2\37\30\0\1\141\47\0\6\66\1\142\34\66"+
    "\1\143\34\66\12\67\1\142\30\67\1\144\34\67\23\0"+
    "\2\70\6\0\7\70\4\0\1\142\23\70\26\0\1\145"+
    "\132\0\1\146\11\0\1\147\4\0\1\150\1\0\1\151"+
    "\24\0\1\152\101\0\2\77\76\0\2\153\71\0\1\154"+
    "\1\0\1\154\2\0\2\77\111\0\1\155\77\0\1\103"+
    "\64\0\2\156\6\0\2\156\12\0\6\156\46\0\2\37"+
    "\6\0\7\37\5\0\3\37\1\157\17\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\4\37\1\160\16\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\17\37"+
    "\1\161\3\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\3\37\1\162\17\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\12\37\1\163\10\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\16\37\1\164\4\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\13\37"+
    "\1\165\7\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\20\37\1\166\2\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\2\37\1\167\20\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\12\37\1\170\10\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\20\37"+
    "\1\171\2\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\15\37\1\172\2\37\1\173\2\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\4\37\1\174\16\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\21\37"+
    "\1\175\1\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\20\37\1\176\2\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\10\37\1\177\12\37\4\0\2\37"+
    "\1\66\1\0\1\66\1\0\73\66\1\0\1\67\1\0"+
    "\1\67\1\0\73\67\1\0\2\200\1\0\1\200\1\0"+
    "\13\200\1\201\57\200\62\0\1\202\70\0\1\203\116\0"+
    "\1\204\101\0\1\205\26\0\2\153\7\0\1\102\16\0"+
    "\1\102\45\0\1\206\1\0\2\156\6\0\1\156\1\207"+
    "\1\0\1\103\1\210\1\104\6\0\4\156\1\207\1\156"+
    "\7\0\1\210\36\0\2\37\6\0\7\37\5\0\1\211"+
    "\22\37\4\0\2\37\23\0\2\37\6\0\7\37\5\0"+
    "\4\37\1\212\16\37\4\0\2\37\23\0\2\37\6\0"+
    "\7\37\5\0\17\37\1\213\3\37\4\0\2\37\23\0"+
    "\2\37\6\0\7\37\5\0\2\37\1\214\20\37\4\0"+
    "\2\37\23\0\2\37\6\0\7\37\5\0\14\37\1\215"+
    "\6\37\4\0\2\37\23\0\2\37\6\0\7\37\5\0"+
    "\1\216\22\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\4\37\1\217\16\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\21\37\1\220\1\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\13\37\1\221\7\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\4\37"+
    "\1\222\16\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\10\37\1\223\12\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\12\37\1\224\10\37\4\0\2\37"+
    "\2\200\1\0\1\200\1\0\73\200\2\201\1\225\1\201"+
    "\1\226\73\201\52\0\1\227\102\0\1\230\114\0\1\231"+
    "\101\0\1\232\26\0\2\233\6\0\2\233\12\0\6\233"+
    "\41\0\1\154\1\0\1\154\1\206\1\0\2\156\6\0"+
    "\1\156\1\207\1\0\1\103\1\210\1\104\6\0\4\156"+
    "\1\207\1\156\7\0\1\210\31\0\1\154\1\0\1\154"+
    "\102\0\2\37\6\0\7\37\5\0\11\37\1\234\11\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\10\37"+
    "\1\235\12\37\4\0\2\37\23\0\2\37\6\0\7\37"+
    "\5\0\4\37\1\236\16\37\4\0\2\37\23\0\2\37"+
    "\6\0\7\37\5\0\20\37\1\237\2\37\4\0\2\37"+
    "\23\0\2\37\6\0\7\37\5\0\12\37\1\240\10\37"+
    "\4\0\2\37\23\0\2\37\6\0\7\37\5\0\1\241"+
    "\22\37\4\0\2\37\23\0\2\37\6\0\7\37\5\0"+
    "\16\37\1\242\4\37\4\0\2\37\23\0\2\37\6\0"+
    "\7\37\5\0\12\37\1\243\10\37\4\0\2\37\23\0"+
    "\2\37\6\0\7\37\5\0\4\37\1\244\16\37\4\0"+
    "\2\37\1\0\1\225\16\0\1\245\61\0\1\225\162\0"+
    "\1\246\71\0\1\247\20\0\2\231\1\0\1\231\1\0"+
    "\73\231\2\232\1\0\1\232\1\0\73\232\23\0\2\233"+
    "\6\0\1\233\1\250\2\0\1\210\7\0\4\233\1\250"+
    "\1\233\7\0\1\210\36\0\2\37\6\0\7\37\5\0"+
    "\5\37\1\251\15\37\4\0\2\37\23\0\2\37\6\0"+
    "\7\37\5\0\10\37\1\252\12\37\4\0\2\37\23\0"+
    "\2\37\6\0\7\37\5\0\20\37\1\253\2\37\4\0"+
    "\2\37\23\0\2\37\6\0\7\37\5\0\13\37\1\254"+
    "\7\37\4\0\2\37\20\0\1\255\132\0\1\256\107\0"+
    "\1\257\32\0\1\154\1\0\1\154\2\0\2\233\6\0"+
    "\1\233\1\250\2\0\1\210\7\0\4\233\1\250\1\233"+
    "\7\0\1\210\36\0\2\37\6\0\7\37\5\0\14\37"+
    "\1\260\6\37\4\0\2\37\20\0\1\201\134\0\1\261"+
    "\104\0\1\231\40\0\2\37\6\0\7\37\5\0\13\37"+
    "\1\262\7\37\4\0\2\37\57\0\1\263\103\0\1\264"+
    "\76\0\1\232\15\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8064];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\0\1\10\1\0\1\11\1\1\1\11"+
    "\1\1\6\11\1\1\1\11\6\1\1\11\5\1\4\11"+
    "\16\1\3\11\4\1\1\0\2\11\1\1\1\11\2\1"+
    "\1\11\2\1\3\0\7\11\24\1\2\11\2\0\1\1"+
    "\4\0\1\11\1\1\1\0\1\11\24\1\5\0\1\1"+
    "\1\0\14\1\4\0\14\1\3\0\5\1\3\0\1\1"+
    "\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private LuaLanguageLevel level = LuaLanguageLevel.LUA54;
    public _LuaLexer(LuaLanguageLevel level) {
        this((Reader) null);
        this.level = level;
    }

    private int nBrackets = 0;
    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset < this.zzBuffer.length() && this.zzBuffer.charAt(this.zzMarkedPos + offset) == c;
    }

    private boolean checkBlock() {
        nBrackets = 0;
        if (checkAhead('[', 0)) {
            int n = 0;
            while (checkAhead('=', n + 1)) n++;
            if (checkAhead('[', n + 1)) {
                nBrackets = n;
                return true;
            }
        }
        return false;
    }

    private int checkBlockEnd() {
        int pos = zzMarkedPos;
        int end = zzEndRead;
        while(pos < end) {
            char c = zzBuffer.charAt(pos);
            if (c == ']') {
                pos++;
                int size = 0;
                while (pos < zzEndRead && zzBuffer.charAt(pos) == '=') {
                    size++;
                    pos++;
                }
                if (size == nBrackets && pos < zzEndRead && zzBuffer.charAt(pos) == ']') {
                    pos++;
                    break;
                }
                continue;
            }
            pos++;
        }
        return pos - zzMarkedPos;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return SHEBANG_CONTENT;
            }
          // fall through
          case 74: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 75: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 76: break;
          case 4:
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 77: break;
          case 5:
            { return GETN;
            }
          // fall through
          case 78: break;
          case 6:
            { return MOD;
            }
          // fall through
          case 79: break;
          case 7:
            { return BIT_AND;
            }
          // fall through
          case 80: break;
          case 8:
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 81: break;
          case 9:
            { return LPAREN;
            }
          // fall through
          case 82: break;
          case 10:
            { return RPAREN;
            }
          // fall through
          case 83: break;
          case 11:
            { return MULT;
            }
          // fall through
          case 84: break;
          case 12:
            { return PLUS;
            }
          // fall through
          case 85: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 86: break;
          case 14:
            { return MINUS;
            }
          // fall through
          case 87: break;
          case 15:
            { return DOT;
            }
          // fall through
          case 88: break;
          case 16:
            { return DIV;
            }
          // fall through
          case 89: break;
          case 17:
            { return NUMBER;
            }
          // fall through
          case 90: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 91: break;
          case 19:
            { return SEMI;
            }
          // fall through
          case 92: break;
          case 20:
            { return LT;
            }
          // fall through
          case 93: break;
          case 21:
            { return ASSIGN;
            }
          // fall through
          case 94: break;
          case 22:
            { return GT;
            }
          // fall through
          case 95: break;
          case 23:
            { return ID;
            }
          // fall through
          case 96: break;
          case 24:
            { if (checkAhead('=', 0) || checkAhead('[', 0)) {
          yypushback(yylength());
          checkBlock();
          zzMarkedPos += checkBlockEnd();
          return STRING;
      } else {
          return LBRACK;
      }
            }
          // fall through
          case 97: break;
          case 25:
            { return RBRACK;
            }
          // fall through
          case 98: break;
          case 26:
            { return EXP;
            }
          // fall through
          case 99: break;
          case 27:
            { yybegin(xBACKTICK_STRING); yypushback(yylength());
            }
          // fall through
          case 100: break;
          case 28:
            { return LCURLY;
            }
          // fall through
          case 101: break;
          case 29:
            { return BIT_OR;
            }
          // fall through
          case 102: break;
          case 30:
            { return RCURLY;
            }
          // fall through
          case 103: break;
          case 31:
            { return BIT_TILDE;
            }
          // fall through
          case 104: break;
          case 32:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 105: break;
          case 33:
            { yybegin(xSHEBANG); return SHEBANG;
            }
          // fall through
          case 106: break;
          case 34:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 107: break;
          case 35:
            { boolean block = checkBlock();
        if (block) {
            yypushback(yylength());
            zzMarkedPos += checkBlockEnd();
            return BLOCK_COMMENT;
        }
        else { yypushback(yylength()); yybegin(xCOMMENT); }
            }
          // fall through
          case 108: break;
          case 36:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 109: break;
          case 37:
            { return CONCAT;
            }
          // fall through
          case 110: break;
          case 38:
            { return DOUBLE_DIV;
            }
          // fall through
          case 111: break;
          case 39:
            { return DOUBLE_COLON;
            }
          // fall through
          case 112: break;
          case 40:
            { return BIT_LTLT;
            }
          // fall through
          case 113: break;
          case 41:
            { return LE;
            }
          // fall through
          case 114: break;
          case 42:
            { return EQ;
            }
          // fall through
          case 115: break;
          case 43:
            { return GE;
            }
          // fall through
          case 116: break;
          case 44:
            { return BIT_RTRT;
            }
          // fall through
          case 117: break;
          case 45:
            { return OPTIONAL_CHAIN;
            }
          // fall through
          case 118: break;
          case 46:
            { return DO;
            }
          // fall through
          case 119: break;
          case 47:
            { return IF;
            }
          // fall through
          case 120: break;
          case 48:
            { return IN;
            }
          // fall through
          case 121: break;
          case 49:
            { return OR;
            }
          // fall through
          case 122: break;
          case 50:
            { return NE;
            }
          // fall through
          case 123: break;
          case 51:
            { yybegin(YYINITIAL);return SHORT_COMMENT;
            }
          // fall through
          case 124: break;
          case 52:
            { return ELLIPSIS;
            }
          // fall through
          case 125: break;
          case 53:
            { return AND;
            }
          // fall through
          case 126: break;
          case 54:
            { return END;
            }
          // fall through
          case 127: break;
          case 55:
            { return FOR;
            }
          // fall through
          case 128: break;
          case 56:
            { return NIL;
            }
          // fall through
          case 129: break;
          case 57:
            { return NOT;
            }
          // fall through
          case 130: break;
          case 58:
            { yybegin(YYINITIAL);return DOC_COMMENT;
            }
          // fall through
          case 131: break;
          case 59:
            { return ELSE;
            }
          // fall through
          case 132: break;
          case 60:
            { if (level.getVersion() < LuaLanguageLevel.LUA52.getVersion()) return ID; else return GOTO;
            }
          // fall through
          case 133: break;
          case 61:
            { return THEN;
            }
          // fall through
          case 134: break;
          case 62:
            { return TRUE;
            }
          // fall through
          case 135: break;
          case 63:
            { return REGION;
            }
          // fall through
          case 136: break;
          case 64:
            { return ENDREGION;
            }
          // fall through
          case 137: break;
          case 65:
            { return BREAK;
            }
          // fall through
          case 138: break;
          case 66:
            { return FALSE;
            }
          // fall through
          case 139: break;
          case 67:
            { return LOCAL;
            }
          // fall through
          case 140: break;
          case 68:
            { return UNTIL;
            }
          // fall through
          case 141: break;
          case 69:
            { return WHILE;
            }
          // fall through
          case 142: break;
          case 70:
            { return ELSEIF;
            }
          // fall through
          case 143: break;
          case 71:
            { return REPEAT;
            }
          // fall through
          case 144: break;
          case 72:
            { return RETURN;
            }
          // fall through
          case 145: break;
          case 73:
            { return FUNCTION;
            }
          // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
