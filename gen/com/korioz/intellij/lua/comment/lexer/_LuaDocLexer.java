/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.korioz.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.korioz.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_EXTEND = 16;
  public static final int xFIELD = 18;
  public static final int xFIELD_ID = 20;
  public static final int xGENERIC = 22;
  public static final int xALIAS = 24;
  public static final int xSUPPRESS = 26;
  public static final int xDOUBLE_QUOTED_STRING = 28;
  public static final int xSINGLE_QUOTED_STRING = 30;
  public static final int xBACKTICK_STRING = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17488 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\23\1\24\3\23\1\24\71\23\1\25\1\23\1\26\1\27\1\30"+
    "\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\23\1\36\11\23\1\37\21\23\1\40\1\41\24"+
    "\23\1\42\3\23\1\24\1\43\1\42\4\23\1\44\1\45\4\0\1\46\1\47\1\27\3\23\2\50\1"+
    "\27\1\51\1\52\1\0\1\53\5\23\1\54\3\0\1\55\1\56\13\23\1\57\1\46\1\60\1\61\1"+
    "\0\1\62\1\27\1\63\1\64\3\23\3\0\1\65\12\23\1\66\1\0\1\67\1\27\1\0\1\70\3\23"+
    "\1\54\1\71\1\22\2\23\1\66\1\72\1\73\1\74\2\27\3\23\1\75\1\23\1\50\6\27\2\23"+
    "\1\32\1\76\2\27\1\77\5\0\1\100\6\23\1\101\2\0\1\102\1\23\1\103\1\0\1\42\1"+
    "\23\1\104\1\105\1\106\2\23\1\107\1\110\1\111\1\112\1\113\1\63\1\114\1\103"+
    "\1\0\1\115\1\116\1\117\1\120\1\106\2\23\1\107\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\0\1\130\1\27\1\117\1\37\1\36\2\23\1\107\1\131\1\111\1\46\1"+
    "\132\1\133\1\27\1\103\1\0\1\43\1\134\1\117\1\105\1\106\2\23\1\107\1\131\1"+
    "\111\1\112\1\124\1\127\1\114\1\103\1\0\1\43\1\27\1\135\1\136\1\137\1\140\1"+
    "\116\1\136\1\23\1\141\1\142\1\143\1\144\1\27\1\127\1\0\1\27\1\43\1\145\1\32"+
    "\1\107\2\23\1\107\1\23\1\146\1\147\1\143\1\150\1\50\1\103\1\0\2\27\1\104\1"+
    "\32\1\107\2\23\1\107\1\151\1\111\1\147\1\143\1\150\1\34\1\103\1\0\1\152\1"+
    "\27\1\145\1\32\1\107\4\23\1\153\1\147\1\154\1\155\1\44\1\103\1\0\1\27\1\41"+
    "\1\156\1\23\1\24\1\41\2\23\1\36\1\157\1\24\1\160\1\161\1\0\1\127\1\0\1\162"+
    "\1\27\1\42\5\23\1\163\1\164\1\165\1\166\1\0\1\167\4\27\1\170\1\171\1\172\1"+
    "\42\1\173\1\174\1\163\1\175\1\176\1\51\1\0\1\177\4\27\1\133\2\27\1\167\1\0"+
    "\1\167\1\200\1\201\1\23\1\42\3\23\1\30\1\45\1\0\1\147\1\202\1\0\1\45\3\0\1"+
    "\203\1\204\7\27\5\23\1\54\1\0\1\205\1\0\1\167\1\66\1\206\1\207\1\210\1\211"+
    "\1\23\1\212\1\213\1\0\1\51\4\23\1\37\1\21\5\23\1\214\51\23\1\137\1\24\1\137"+
    "\5\23\1\137\4\23\1\137\1\24\1\137\1\23\1\24\7\23\1\137\10\23\1\215\4\27\2"+
    "\23\2\27\12\23\2\76\1\42\114\23\1\105\2\23\1\216\2\23\1\50\11\23\1\136\1\23"+
    "\1\133\1\23\1\32\1\217\1\27\2\23\1\217\1\27\2\23\1\220\1\27\1\23\1\32\1\221"+
    "\1\27\6\23\1\222\3\0\1\223\1\224\1\0\1\167\3\27\1\225\1\0\1\167\13\23\1\27"+
    "\1\226\4\23\1\227\10\23\1\76\1\27\3\23\1\24\1\0\1\2\1\0\1\2\1\127\1\0\3\23"+
    "\1\76\1\30\1\27\5\23\1\115\3\23\1\26\1\0\1\167\4\27\2\23\1\165\1\2\6\23\1"+
    "\202\1\166\3\0\1\112\1\0\1\167\1\0\1\167\1\44\1\27\1\0\1\51\10\27\1\230\5"+
    "\23\1\222\1\0\1\230\1\115\1\0\1\167\1\27\1\231\1\2\1\27\1\232\3\23\1\102\1"+
    "\210\1\0\1\70\4\23\1\66\1\0\1\2\1\27\4\23\1\222\2\0\1\27\1\0\1\233\1\0\1\70"+
    "\3\23\1\76\1\23\1\133\10\27\1\234\2\0\1\235\1\236\1\167\30\23\7\0\1\237\42"+
    "\23\2\76\4\23\2\76\1\23\1\240\3\23\1\76\6\23\1\32\1\176\1\241\1\30\1\242\1"+
    "\115\1\23\1\30\1\241\1\30\1\243\1\244\3\27\1\245\1\27\1\44\1\133\1\27\1\246"+
    "\1\247\1\147\1\0\1\43\1\44\2\27\1\23\1\30\4\23\2\27\1\0\1\203\1\250\1\0\1"+
    "\251\1\27\1\252\1\41\1\157\1\253\1\31\1\254\1\23\1\255\1\256\1\257\2\27\5"+
    "\23\1\133\116\27\5\23\1\24\5\23\1\24\20\23\1\30\1\260\1\261\1\27\4\23\1\37"+
    "\1\21\7\23\1\44\1\27\1\63\2\23\1\24\1\27\10\24\4\0\5\27\1\44\72\27\1\262\3"+
    "\27\1\42\1\212\1\253\1\30\1\42\11\23\1\24\1\263\1\42\12\23\1\214\1\256\4\23"+
    "\1\24\1\42\12\23\1\24\2\27\3\23\1\50\6\27\170\23\1\76\11\27\75\23\1\50\2\27"+
    "\21\23\1\30\10\27\5\23\1\76\41\23\1\30\2\23\1\0\1\261\2\27\5\23\1\165\1\77"+
    "\1\264\3\23\1\66\12\23\1\167\3\27\1\44\1\23\1\41\14\23\1\106\3\23\1\24\1\23"+
    "\7\27\1\44\1\23\1\265\1\266\2\23\1\54\2\27\1\133\6\23\1\115\1\27\1\70\5\23"+
    "\1\222\1\0\1\51\1\27\1\0\1\167\2\0\1\70\1\267\1\0\1\70\2\23\1\66\1\51\2\23"+
    "\1\165\1\0\1\2\1\27\3\23\1\30\1\100\5\23\1\54\1\0\1\251\1\44\1\0\1\167\1\270"+
    "\1\23\1\0\1\271\5\23\1\102\1\166\1\27\1\266\1\272\1\0\1\167\2\23\1\24\1\273"+
    "\6\23\1\207\1\274\1\227\2\27\1\275\1\23\1\54\1\276\1\27\3\277\1\27\2\24\5"+
    "\23\1\214\1\76\1\27\16\23\1\54\1\300\1\0\1\167\64\23\1\115\1\27\2\23\1\24"+
    "\1\301\5\23\1\115\40\27\55\23\1\76\15\23\1\26\4\27\1\24\1\27\1\301\1\302\1"+
    "\23\1\107\1\24\1\176\1\303\15\23\1\26\3\27\1\301\54\23\1\76\2\27\10\23\1\41"+
    "\6\23\5\27\1\23\1\30\2\0\2\27\2\0\1\116\2\27\1\256\3\27\1\43\1\32\20\23\1"+
    "\304\1\246\1\27\1\0\1\167\1\42\2\23\1\120\1\42\2\23\1\50\1\305\12\23\1\24"+
    "\3\41\1\306\1\307\2\27\1\310\1\23\1\151\2\23\1\24\2\23\1\311\1\23\1\76\1\23"+
    "\1\76\4\27\17\23\1\50\10\27\6\23\1\30\20\27\1\312\20\27\3\23\1\30\6\23\1\133"+
    "\1\27\1\251\3\27\4\23\1\27\1\256\3\23\1\50\4\23\1\66\1\313\3\23\1\76\4\23"+
    "\1\115\1\23\1\253\5\27\23\23\1\76\1\0\1\167\4\23\1\115\4\23\1\115\5\23\1\27"+
    "\6\23\1\115\23\27\46\23\1\24\1\27\2\23\1\76\1\27\1\23\23\27\1\76\1\107\4\23"+
    "\1\37\1\314\2\23\1\76\1\27\2\23\1\24\1\27\3\23\1\24\10\27\2\23\1\315\1\27"+
    "\2\23\1\76\1\27\3\23\1\26\10\27\7\23\1\305\10\27\1\316\1\77\1\151\1\42\2\23"+
    "\1\115\1\123\4\27\3\23\1\30\3\23\1\30\4\27\1\23\1\42\2\23\1\317\3\27\6\23"+
    "\1\76\1\27\2\23\1\76\1\27\2\23\1\50\1\27\2\23\1\26\15\27\11\23\1\133\6\27"+
    "\6\23\1\50\1\27\6\23\1\50\41\27\1\232\6\23\1\0\1\166\3\27\1\127\1\0\1\27\1"+
    "\63\1\232\5\23\1\0\1\320\2\27\3\23\1\133\1\0\1\167\1\232\3\23\1\165\1\0\1"+
    "\147\1\0\2\27\4\23\1\321\1\27\1\232\5\23\1\54\1\0\1\322\1\323\1\0\1\324\4"+
    "\27\2\23\1\36\2\23\1\222\1\0\1\204\10\27\1\24\1\254\1\23\1\37\1\23\1\133\5"+
    "\23\1\165\1\0\1\313\1\0\1\167\1\145\1\105\1\106\2\23\1\107\1\131\1\111\1\112"+
    "\1\124\1\144\1\256\1\103\2\203\21\27\6\23\1\202\1\0\1\205\1\50\1\0\1\167\4"+
    "\27\6\23\2\0\1\325\1\27\1\0\1\167\24\27\5\23\1\165\1\51\1\0\1\251\2\27\1\272"+
    "\4\27\6\23\2\0\1\326\1\27\1\0\1\167\4\27\5\23\1\54\1\0\1\27\1\0\1\167\6\27"+
    "\3\23\1\327\1\0\1\2\1\0\1\167\54\27\10\23\1\0\1\167\1\27\1\44\40\27\1\102"+
    "\1\232\4\23\1\54\1\330\1\63\1\27\1\102\1\100\4\23\1\242\1\212\1\0\1\167\4"+
    "\27\7\23\1\133\40\27\1\23\1\107\3\23\1\165\1\166\1\0\1\133\1\27\1\0\1\167"+
    "\2\27\1\41\3\23\1\331\2\0\1\45\1\166\11\27\1\24\1\36\4\23\1\332\1\333\1\213"+
    "\1\27\1\0\1\167\24\27\63\23\1\26\14\27\15\23\1\24\2\27\30\23\1\115\27\27\5"+
    "\23\1\24\72\27\10\23\1\24\67\27\7\23\1\133\3\23\1\24\1\0\1\167\14\27\3\23"+
    "\1\76\1\203\1\27\6\23\1\166\1\27\1\115\1\27\1\0\1\167\1\301\2\23\1\256\2\23"+
    "\56\27\10\23\1\30\1\27\1\102\4\0\1\166\1\27\1\63\1\232\1\23\10\27\1\26\3\27"+
    "\75\23\1\30\2\27\36\23\1\50\41\27\43\23\1\24\12\27\61\23\1\115\40\27\15\23"+
    "\1\50\1\23\1\30\1\23\1\133\1\23\1\334\1\2\127\27\1\335\1\336\2\0\1\337\1\2"+
    "\3\27\1\340\22\27\1\323\67\27\12\23\1\32\10\23\1\32\1\341\1\342\1\23\1\343"+
    "\1\151\7\23\1\37\1\344\2\32\3\23\1\345\1\176\1\41\1\107\51\23\1\76\3\23\1"+
    "\107\2\23\1\214\3\23\1\214\2\23\1\32\3\23\1\32\2\23\1\24\3\23\1\24\3\23\1"+
    "\107\3\23\1\107\2\23\1\214\1\346\14\0\1\166\1\231\5\0\1\203\1\312\1\27\1\347"+
    "\2\27\1\231\1\45\1\0\52\27\1\166\2\0\1\350\1\351\1\313\72\27\30\23\1\30\1"+
    "\27\1\166\5\27\10\23\1\222\1\313\1\0\1\167\24\27\1\151\3\23\1\170\1\42\1\214"+
    "\1\352\1\252\1\353\1\170\1\240\1\170\2\214\1\126\1\23\1\36\1\23\1\115\1\354"+
    "\1\36\1\23\1\115\50\27\32\23\1\24\5\27\106\23\1\30\1\27\33\23\1\76\120\23"+
    "\1\26\1\27\146\23\1\133\3\27\3\23\1\76\74\27\1\125\3\27\14\0\20\27\36\0\2"+
    "\27");

  /* The ZZ_CMAP_A table has 1896 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\15\1\4\1\2\1\22\1\4\1\1\6\15\4\14\1\3\1\14\1\12\1\61\1\5\2\14\1\16\1\53"+
    "\1\54\2\14\1\46\1\11\1\7\1\14\12\21\1\47\1\14\1\51\1\14\1\52\1\14\1\10\22"+
    "\20\1\57\1\13\1\60\1\14\1\5\1\17\1\31\1\45\1\36\1\27\1\25\1\23\1\35\1\20\1"+
    "\24\2\20\1\26\1\33\1\43\1\40\1\30\1\20\1\32\1\37\1\42\1\41\1\34\2\20\1\44"+
    "\1\20\1\55\1\50\1\56\1\14\6\15\1\6\2\15\1\0\1\14\4\5\4\14\1\5\2\14\1\15\7"+
    "\14\1\5\4\14\1\5\5\14\17\5\1\14\2\5\4\14\4\5\16\14\5\5\7\14\1\5\1\14\1\5\1"+
    "\14\5\5\1\14\2\5\2\14\4\5\1\14\1\5\6\14\1\5\1\14\3\5\1\14\1\5\1\14\4\5\1\14"+
    "\13\5\1\14\3\5\1\14\5\15\2\14\6\5\1\14\7\5\1\14\1\5\15\14\1\5\1\14\15\15\1"+
    "\14\1\15\1\14\2\15\1\14\2\15\1\14\1\15\3\5\5\14\6\15\5\14\1\5\4\14\3\15\1"+
    "\14\1\15\3\14\3\5\7\15\4\14\2\5\1\15\13\5\1\14\1\5\7\15\2\5\2\15\1\14\4\15"+
    "\2\5\2\15\3\5\2\14\1\5\7\14\1\15\1\5\1\15\6\5\3\15\2\14\11\5\3\15\1\5\6\14"+
    "\2\15\6\5\4\15\2\5\2\14\2\15\1\5\11\15\1\5\3\15\1\5\5\15\2\14\1\5\3\15\4\14"+
    "\6\5\6\14\10\15\6\5\3\15\1\5\2\15\1\5\7\15\2\5\2\15\2\14\2\15\1\5\3\15\1\14"+
    "\10\5\2\14\2\5\2\14\6\5\1\14\7\5\1\14\1\5\3\14\4\5\2\14\1\15\1\5\7\15\2\14"+
    "\2\15\2\14\3\15\1\5\5\14\2\5\1\14\5\5\7\14\2\5\4\14\3\15\1\14\6\5\4\14\2\5"+
    "\1\14\2\5\1\14\2\5\1\14\2\5\2\14\1\15\1\14\5\15\4\14\2\15\2\14\3\15\3\14\1"+
    "\15\7\14\4\5\1\14\1\5\7\14\4\15\3\5\1\15\2\14\1\5\1\14\2\5\1\14\3\5\2\15\1"+
    "\14\3\15\2\14\1\5\10\14\1\5\6\15\2\14\1\15\1\5\1\14\6\5\3\14\3\5\1\14\4\5"+
    "\3\14\2\5\1\14\1\5\1\14\4\5\4\14\5\15\3\14\3\15\1\14\4\15\2\14\1\5\6\14\5"+
    "\15\1\14\5\5\3\14\1\5\7\15\1\14\2\15\5\14\2\15\1\14\4\5\1\14\3\5\1\14\2\5"+
    "\5\14\3\5\2\15\1\5\3\15\1\14\4\15\1\5\5\14\3\5\1\15\2\14\2\15\1\14\7\5\1\14"+
    "\1\5\4\14\1\15\4\14\6\15\1\14\1\15\3\14\2\15\4\14\1\5\1\15\2\5\7\15\4\14\10"+
    "\5\10\15\1\14\2\15\7\14\2\5\1\14\1\5\2\14\2\5\1\14\1\5\2\14\1\5\6\14\4\5\1"+
    "\14\3\5\1\14\1\5\1\14\1\5\2\14\2\5\1\14\3\5\2\15\1\14\2\15\1\5\2\14\5\5\1"+
    "\14\1\5\1\14\2\15\2\14\4\5\5\14\1\15\1\14\1\15\1\14\1\15\4\14\2\15\5\5\10"+
    "\15\11\14\1\15\1\14\7\15\1\5\2\15\4\5\3\15\1\5\3\15\2\5\7\15\3\5\4\15\5\5"+
    "\14\15\1\5\1\15\3\5\1\14\7\5\2\14\3\15\1\0\11\5\3\15\3\14\2\5\2\15\4\14\1"+
    "\5\1\14\2\15\4\14\4\5\10\15\3\14\1\5\3\14\2\5\1\15\5\14\4\15\1\14\5\5\2\15"+
    "\2\5\1\15\1\5\5\14\5\15\3\5\3\14\10\15\5\5\2\15\3\14\3\5\3\15\1\14\5\15\4"+
    "\5\1\15\4\5\3\15\2\5\3\15\1\14\5\15\1\14\1\5\1\14\1\5\1\14\1\5\1\14\1\5\2"+
    "\14\3\5\1\14\6\5\2\14\2\5\13\0\5\15\2\22\5\15\1\0\4\14\1\5\12\14\1\0\1\14"+
    "\1\15\3\14\4\15\11\14\1\5\4\14\1\5\1\14\5\5\2\14\1\5\1\14\4\5\1\14\3\5\2\14"+
    "\4\5\5\14\5\5\4\14\1\5\4\14\4\5\3\15\2\5\4\14\1\0\4\14\3\5\1\14\2\15\2\14"+
    "\3\5\6\15\1\14\3\5\1\15\3\5\1\15\4\5\1\15\4\5\3\14\1\5\1\14\1\5\2\14\5\5\1"+
    "\15\2\5\2\15\5\5\1\14\4\5\2\15\4\14\1\5\3\15\2\5\1\15\5\5\2\15\3\14\3\5\4"+
    "\14\3\5\2\15\2\14\6\5\1\14\3\15\1\14\2\15\5\14\5\5\5\14\1\5\1\15\3\5\1\14"+
    "\2\5\1\14\7\5\2\14\1\15\6\14\2\5\2\14\3\5\3\14\2\5\3\14\2\5\2\14\3\15\4\14"+
    "\3\5\1\14\2\5\1\14\1\5\5\14\1\15\2\14\3\15\5\14\1\5\3\14\1\5\2\14\4\5\1\14"+
    "\2\5\2\14\1\5\3\15\1\14\2\15\1\14\5\5\2\15\1\14\3\15\2\14\1\15\2\14\3\5\1"+
    "\15\2\14\1\5\1\14\1\15\4\5\5\14\3\15\3\14\2\15\1\5\1\14\1\5\3\14\4\15\2\5"+
    "\1\14\1\5\1\15\3\14\1\5\3\14\2\5\3\14\5\15\1\5\4\15\3\14\6\15\1\5\6\15\3\14"+
    "\1\15\1\14\2\15\1\14\1\15\2\5\3\14\2\15\6\14\5\15\3\14\6\15\2\14\3\15\2\14"+
    "\4\15\4\14\1\5\2\14\2\5\2\14\4\5\1\14\4\5\1\14\1\5\1\14\6\5\2\14\5\5\1\14"+
    "\4\5\1\14\4\5\2\14\2\15\4\14\1\15\3\14\1\15\2\14\7\15\1\14\2\15\1\14\2\15"+
    "\1\14\1\5\1\14\1\5\5\14\1\5\1\14\1\5\1\14\3\5\1\14\3\5\1\14\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\14\0\1\2\2\3\1\4\1\5\1\6"+
    "\1\2\2\7\1\10\1\11\1\12\1\13\15\14\1\1"+
    "\1\4\1\15\1\5\1\16\1\5\1\17\1\20\1\21"+
    "\2\16\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\5\1\33\1\34\1\15\1\35\1\36"+
    "\1\37\3\40\1\41\17\14\2\0\2\16\1\42\2\15"+
    "\1\40\2\0\14\14\1\43\3\14\1\15\1\16\1\44"+
    "\1\16\3\15\16\14\1\45\1\16\3\15\1\46\1\14"+
    "\1\47\3\14\1\50\4\14\1\51\2\14\1\16\3\15"+
    "\3\14\1\52\1\53\1\54\1\55\3\14\1\56\2\15"+
    "\1\57\1\14\1\60\1\14\1\61\2\14\1\62\1\15"+
    "\1\63\1\14\1\64\1\65\1\15\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u0352\0\u03b6\0\u0352\0\u0352\0\u03e8"+
    "\0\u041a\0\u0352\0\u044c\0\u0352\0\u0352\0\u047e\0\u04b0\0\u04e2"+
    "\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0352\0\u0352\0\u0352\0\u0866\0\u0898\0\u0352\0\u0352"+
    "\0\u0352\0\u0352\0\u0352\0\u0352\0\u0352\0\u0352\0\u0352\0\u08ca"+
    "\0\u08fc\0\u0352\0\u092e\0\u0352\0\u0352\0\u0352\0\u0960\0\u0992"+
    "\0\u09c4\0\u03e8\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0352\0\u0dac\0\u0dde"+
    "\0\u0352\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u04b0"+
    "\0\u10cc\0\u10fe\0\u1130\0\u0352\0\u0352\0\u0802\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u04b0\0\u14e6\0\u1518\0\u154a\0\u157c\0\u04b0\0\u15ae\0\u04b0"+
    "\0\u15e0\0\u1612\0\u1644\0\u04b0\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u04b0\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a"+
    "\0\u189c\0\u18ce\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u1900\0\u1932"+
    "\0\u1964\0\u0802\0\u1996\0\u19c8\0\u079e\0\u19fa\0\u04b0\0\u1a2c"+
    "\0\u04b0\0\u1a5e\0\u1a90\0\u079e\0\u1ac2\0\u04b0\0\u1af4\0\u04b0"+
    "\0\u04b0\0\u1b26\0\u04b0\0\u079e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\2\25\1\22\1\26\1\22\1\27"+
    "\1\30\10\22\1\26\37\22\1\26\1\31\1\32\2\25"+
    "\1\33\2\26\1\34\7\26\1\33\2\26\23\33\13\26"+
    "\1\35\1\26\1\31\1\32\2\25\1\36\12\26\1\36"+
    "\2\26\23\36\15\26\1\31\1\32\2\25\1\37\12\26"+
    "\1\37\2\26\1\40\2\37\1\41\1\37\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\37"+
    "\1\53\3\37\14\26\1\54\1\31\1\32\1\55\1\25"+
    "\55\54\1\26\1\31\1\32\2\25\1\56\1\26\1\57"+
    "\10\26\1\56\2\26\23\56\15\26\1\31\1\32\2\25"+
    "\1\60\1\26\1\61\1\34\1\26\1\62\3\26\1\63"+
    "\1\64\1\60\2\26\1\65\10\60\1\66\11\60\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\3\26\1\31\1\32\2\25\1\101\12\26\1\101"+
    "\2\26\23\101\14\26\1\22\1\31\1\32\2\25\42\22"+
    "\1\102\12\22\1\26\1\31\1\32\2\25\1\56\12\26"+
    "\1\56\2\26\5\56\1\103\15\56\15\26\1\31\1\32"+
    "\2\25\1\56\12\26\1\56\2\26\23\56\14\26\1\104"+
    "\1\31\1\32\2\25\1\33\12\104\1\33\2\104\23\33"+
    "\1\105\1\106\13\104\1\31\1\32\2\25\1\56\12\104"+
    "\1\56\2\104\23\56\15\104\1\31\1\32\2\25\1\33"+
    "\12\104\1\33\2\104\23\33\1\105\13\104\12\26\1\107"+
    "\65\26\1\110\62\26\1\111\42\26\64\0\1\24\62\0"+
    "\2\25\66\0\1\112\52\0\1\32\64\0\3\33\5\0"+
    "\1\33\2\0\2\33\1\0\23\33\21\0\3\36\5\0"+
    "\1\36\2\0\2\36\1\0\23\36\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\23\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\113\21\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\6\37\1\114"+
    "\14\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\6\37\1\115\1\116\6\37\1\117\4\37\21\0\3\37"+
    "\5\0\1\37\2\0\2\37\1\0\3\37\1\120\17\37"+
    "\21\0\3\37\5\0\1\37\2\0\2\37\1\0\2\37"+
    "\1\121\20\37\21\0\3\37\5\0\1\37\2\0\2\37"+
    "\1\0\15\37\1\122\5\37\21\0\3\37\5\0\1\37"+
    "\2\0\2\37\1\0\6\37\1\123\14\37\21\0\3\37"+
    "\5\0\1\37\2\0\2\37\1\0\2\37\1\124\20\37"+
    "\21\0\3\37\5\0\1\37\2\0\2\37\1\0\3\37"+
    "\1\125\17\37\21\0\3\37\5\0\1\37\2\0\2\37"+
    "\1\0\2\37\1\126\13\37\1\127\4\37\21\0\3\37"+
    "\5\0\1\37\2\0\2\37\1\0\11\37\1\130\11\37"+
    "\21\0\3\37\5\0\1\37\2\0\2\37\1\0\21\37"+
    "\1\131\1\37\14\0\1\54\2\0\1\54\1\0\56\54"+
    "\2\0\1\55\1\25\55\54\5\0\3\56\5\0\1\56"+
    "\2\0\2\56\1\0\23\56\23\0\1\132\57\0\3\60"+
    "\5\0\1\60\2\0\2\60\1\0\23\60\23\0\1\133"+
    "\57\0\3\60\5\0\1\60\2\0\2\60\1\0\16\60"+
    "\1\134\4\60\21\0\3\60\5\0\1\60\2\0\2\60"+
    "\1\0\6\60\1\135\14\60\74\0\1\136\6\0\3\101"+
    "\5\0\1\101\2\0\2\101\1\0\23\101\21\0\3\56"+
    "\5\0\1\56\2\0\2\56\1\0\7\56\1\137\6\56"+
    "\1\140\4\56\14\0\12\107\1\141\1\142\46\107\13\110"+
    "\1\143\2\110\1\141\43\110\17\0\1\141\2\111\1\0"+
    "\23\111\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\2\37\1\144\20\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\20\37\1\145\2\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\7\37\1\146\13\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\1\37\1\147"+
    "\13\37\1\150\5\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\22\37\1\151\21\0\3\37\5\0\1\37"+
    "\2\0\2\37\1\0\1\37\1\152\21\37\21\0\3\37"+
    "\5\0\1\37\2\0\2\37\1\0\17\37\1\153\3\37"+
    "\21\0\3\37\5\0\1\37\2\0\2\37\1\0\4\37"+
    "\1\154\16\37\21\0\3\37\5\0\1\37\2\0\2\37"+
    "\1\0\7\37\1\155\13\37\21\0\3\37\5\0\1\37"+
    "\2\0\2\37\1\0\20\37\1\156\2\37\21\0\3\37"+
    "\5\0\1\37\2\0\2\37\1\0\6\37\1\157\14\37"+
    "\21\0\3\37\5\0\1\37\2\0\2\37\1\0\2\37"+
    "\1\160\20\37\21\0\3\37\5\0\1\37\2\0\2\37"+
    "\1\0\5\37\1\161\15\37\21\0\3\37\5\0\1\37"+
    "\2\0\2\37\1\0\2\37\1\162\20\37\21\0\3\37"+
    "\5\0\1\37\2\0\2\37\1\0\5\37\1\163\15\37"+
    "\23\0\1\164\61\0\1\165\57\0\3\60\5\0\1\60"+
    "\2\0\2\60\1\0\20\60\1\166\2\60\21\0\3\60"+
    "\5\0\1\60\2\0\2\60\1\0\7\60\1\167\13\60"+
    "\21\0\3\56\5\0\1\56\2\0\2\56\1\0\1\56"+
    "\1\170\13\56\1\171\5\56\21\0\3\56\5\0\1\56"+
    "\2\0\2\56\1\0\22\56\1\172\15\0\2\107\2\0"+
    "\1\107\1\0\13\107\1\0\37\107\1\0\2\110\2\0"+
    "\1\110\1\0\13\110\1\0\37\110\5\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\3\37\1\173\17\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\12\37\1\174"+
    "\10\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\6\37\1\175\14\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\11\37\1\176\11\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\17\37\1\177\3\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\3\37\1\200"+
    "\17\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\6\37\1\201\14\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\16\37\1\202\4\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\16\37\1\203\4\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\6\37\1\204"+
    "\14\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\2\37\1\205\20\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\14\37\1\206\6\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\5\37\1\207\15\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\7\37\1\210"+
    "\13\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\2\37\1\211\20\37\21\0\3\60\5\0\1\60\2\0"+
    "\2\60\1\0\6\60\1\212\14\60\21\0\3\56\5\0"+
    "\1\56\2\0\2\56\1\0\11\56\1\213\11\56\21\0"+
    "\3\56\5\0\1\56\2\0\2\56\1\0\17\56\1\214"+
    "\3\56\21\0\3\56\5\0\1\56\2\0\2\56\1\0"+
    "\3\56\1\215\17\56\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\4\37\1\216\16\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\16\37\1\217\4\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\10\37\1\220"+
    "\12\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\6\37\1\221\14\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\2\37\1\222\20\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\223\21\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\14\37\1\224"+
    "\6\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\7\37\1\225\13\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\3\37\1\226\17\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\7\37\1\227\13\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\7\37\1\230"+
    "\13\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\14\37\1\231\6\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\7\37\1\232\13\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\3\37\1\233\17\37\21\0"+
    "\3\60\5\0\1\60\2\0\2\60\1\0\7\60\1\234"+
    "\13\60\21\0\3\56\5\0\1\56\2\0\2\56\1\0"+
    "\6\56\1\235\14\56\21\0\3\56\5\0\1\56\2\0"+
    "\2\56\1\0\2\56\1\236\20\56\21\0\3\56\5\0"+
    "\1\56\2\0\2\56\1\0\1\56\1\237\21\56\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\6\37\1\240"+
    "\14\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\17\37\1\241\3\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\13\37\1\242\7\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\13\37\1\243\7\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\20\37\1\244"+
    "\2\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\2\37\1\245\20\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\12\37\1\246\10\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\1\37\1\247\21\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\2\37\1\250"+
    "\20\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\15\37\1\251\5\37\21\0\3\60\5\0\1\60\2\0"+
    "\2\60\1\0\12\60\1\252\10\60\21\0\3\56\5\0"+
    "\1\56\2\0\2\56\1\0\17\56\1\253\3\56\21\0"+
    "\3\56\5\0\1\56\2\0\2\56\1\0\13\56\1\254"+
    "\7\56\21\0\3\56\5\0\1\56\2\0\2\56\1\0"+
    "\13\56\1\255\7\56\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\12\37\1\256\10\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\2\37\1\257\20\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\17\37\1\260"+
    "\3\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\13\37\1\261\7\37\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\14\37\1\262\6\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\6\37\1\263\14\37\21\0"+
    "\3\56\5\0\1\56\2\0\2\56\1\0\2\56\1\264"+
    "\20\56\21\0\3\56\5\0\1\56\2\0\2\56\1\0"+
    "\17\56\1\265\3\56\21\0\3\37\5\0\1\37\2\0"+
    "\2\37\1\0\2\37\1\266\20\37\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\2\37\1\267\20\37\21\0"+
    "\3\37\5\0\1\37\2\0\2\37\1\0\14\37\1\270"+
    "\6\37\21\0\3\37\5\0\1\37\2\0\2\37\1\0"+
    "\4\37\1\271\16\37\21\0\3\56\5\0\1\56\2\0"+
    "\2\56\1\0\2\56\1\272\20\56\21\0\3\37\5\0"+
    "\1\37\2\0\2\37\1\0\4\37\1\273\16\37\21\0"+
    "\3\56\5\0\1\56\2\0\2\56\1\0\4\56\1\274"+
    "\16\56\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\14\0\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\1\2\11\24\1\3\11\2\1\11\11"+
    "\2\1\1\11\1\1\3\11\23\1\2\0\2\1\1\11"+
    "\2\1\1\11\2\0\20\1\2\11\107\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return STRING;
            } 
            // fall through
          case 56: break;
          case 2: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 57: break;
          case 3: 
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 58: break;
          case 4: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 59: break;
          case 5: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 60: break;
          case 6: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 61: break;
          case 7: 
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 63: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 64: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 65: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return ID;
            } 
            // fall through
          case 66: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 67: break;
          case 13: 
            { beginType(); return ID;
            } 
            // fall through
          case 68: break;
          case 14: 
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            } 
            // fall through
          case 69: break;
          case 15: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 70: break;
          case 16: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 71: break;
          case 17: 
            { yybegin(xBACKTICK_STRING); yypushback(yylength());
            } 
            // fall through
          case 72: break;
          case 18: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 73: break;
          case 19: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 74: break;
          case 20: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 75: break;
          case 21: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 76: break;
          case 22: 
            { _typeLevel--; _typeReq = false; return GT;
            } 
            // fall through
          case 77: break;
          case 23: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 78: break;
          case 24: 
            { _typeLevel--; _typeReq = false; return RPAREN;
            } 
            // fall through
          case 79: break;
          case 25: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 80: break;
          case 26: 
            { _typeLevel--; _typeReq = false; return RCURLY;
            } 
            // fall through
          case 81: break;
          case 27: 
            { yybegin(xCLASS_EXTEND); return ID;
            } 
            // fall through
          case 82: break;
          case 28: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 83: break;
          case 29: 
            { yybegin(YYINITIAL); yypushback(yylength());
            } 
            // fall through
          case 84: break;
          case 30: 
            { return COMMA;
            } 
            // fall through
          case 85: break;
          case 31: 
            { return EXTENDS;
            } 
            // fall through
          case 86: break;
          case 32: 
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            } 
            // fall through
          case 87: break;
          case 33: 
            { return DASHES;
            } 
            // fall through
          case 88: break;
          case 34: 
            { _typeReq = false; return ARR;
            } 
            // fall through
          case 89: break;
          case 35: 
            { yybegin(xTAG); return TAG_NAME_SEE;
            } 
            // fall through
          case 90: break;
          case 36: 
            { return FUN;
            } 
            // fall through
          case 91: break;
          case 37: 
            { beginType(); return TAG_NAME_TYPE;
            } 
            // fall through
          case 92: break;
          case 38: 
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            } 
            // fall through
          case 93: break;
          case 39: 
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            } 
            // fall through
          case 94: break;
          case 40: 
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            } 
            // fall through
          case 95: break;
          case 41: 
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            } 
            // fall through
          case 96: break;
          case 42: 
            { return TAG_NAME_PUBLIC;
            } 
            // fall through
          case 97: break;
          case 43: 
            { beginType(); return TAG_NAME_RETURN;
            } 
            // fall through
          case 98: break;
          case 44: 
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            } 
            // fall through
          case 99: break;
          case 45: 
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            } 
            // fall through
          case 100: break;
          case 46: 
            { _typeReq = true; return VARARG;
            } 
            // fall through
          case 101: break;
          case 47: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 102: break;
          case 48: 
            { return TAG_NAME_PRIVATE;
            } 
            // fall through
          case 103: break;
          case 49: 
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            } 
            // fall through
          case 104: break;
          case 50: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 105: break;
          case 51: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 106: break;
          case 52: 
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            } 
            // fall through
          case 107: break;
          case 53: 
            { beginType(); return TAG_NAME_OVERLOAD;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return TAG_NAME_PROTECTED;
            } 
            // fall through
          case 109: break;
          case 55: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
